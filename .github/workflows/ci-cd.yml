name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-remote: ${{ steps.push.outputs.remote }}
    steps:
      - uses: actions/checkout@v4

      - id: build
        run: |
          IMAGE_TAG=ci-image:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          echo "local=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: push
        run: |
          REMOTE=${{ secrets.DOCKERHUB_USERNAME }}/ci-image:${{ github.sha }}
          docker tag ${{ steps.build.outputs.local }} $REMOTE
          docker push $REMOTE
          echo "remote=$REMOTE" >> $GITHUB_OUTPUT

  sonarcloud:
    needs: build-image
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - run: docker pull ${{ needs.build-image.outputs.image-remote }}
      - run: docker run --rm ${{ needs.build-image.outputs.image-remote }} sonar-scanner -Dsonar.login=$SONAR_TOKEN

  npm-audit:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - run: docker pull ${{ needs.build-image.outputs.image-remote }}
      - run: docker run --rm ${{ needs.build-image.outputs.image-remote }} npm audit --audit-level=moderate

  deploy-vercel:
    needs: build-image
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - run: docker pull ${{ needs.build-image.outputs.image-remote }}
      - run: docker run --rm ${{ needs.build-image.outputs.image-remote }} npx vercel --token $VERCEL_TOKEN --org-id $VERCEL_ORG_ID --project-id $VERCEL_PROJECT_ID --prod
