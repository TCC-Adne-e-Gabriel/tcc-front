name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  npm-audit:
    name: NPM Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Audit npm dependencies
        run: |
          cd frontend
          npm run audit:ci || true
        shell: bash

  build-and-push:
    runs-on: ubuntu-latest
    needs: [npm-audit, sonarcloud]
    outputs:
      image-remote: ${{ steps.push.outputs.remote }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build image
        id: build
        run: |
          IMAGE_TAG=tcc-front:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          echo "local=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: DockerHub Push
        id: push
        run: |
          REMOTE=${{ secrets.DOCKERHUB_USERNAME }}/tcc-front:${{ github.sha }}
          docker tag ${{ steps.build.outputs.local }} $REMOTE
          docker push $REMOTE
          echo "remote=$REMOTE" >> $GITHUB_OUTPUT

  vercel-deploy:
    name: Deploy to Vercel
    needs: build-and-push
    runs-on: ubuntu-latest
    container: ${{ needs.build-and-push.outputs.image }}
    env:
      VERCEL_TOKEN:      ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID:     ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy
        working-directory: frontend
        run: npx vercel --token $VERCEL_TOKEN \
                       --org-id $VERCEL_ORG_ID \
                       --project-id $VERCEL_PROJECT_ID \
                       --prod